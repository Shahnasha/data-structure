program 1:C program to find the sum of 'n' numbers.
Roll no: 51
Name:Shahna S
code:
#include<stdio.h>

int main()
{
	int elem,sum;
	printf("Enter the range:");
	scanf("%d",&elem);
	int num[elem];
	printf("Enter %d values:\n",elem);

	for(int i=0;i<elem;i++)
	{

		scanf("%d",&num[i]);

	}

	for(int i=0;i<elem;i++)
	{
		sum=sum+num[i];

	}

	printf("Sum of numbers is %d\n",sum);
	return 0;
}
program 2:C program to merge two sorted arrays.
Roll no: 51
Name:Shahna S
code:
#include<stdio.h>
 
int a[10], b[10], d[20];
int m, n;
int i, j;
 
void sort(int c[], int size) 
{
	int temp;
	for(i = 0; i < size - 1; i++) {
		for(j = i + 1; j < size; j++) {
			if(c[i] > c[j]) 
			{
				temp = c[i];
				c[i] = c[j];
				c[j] = temp;
	   		}
		}
	}
}
 
void display(int c[], int size) 
{
	for(i = 0; i < size; i++)
	{
		printf("%d\t", c[i]);
	}
}

int main() 
	{

	printf("Enter the number of elements of array 1:\n");
	scanf("%d", &m);
	printf("Enter the elements of array 1:\n");
	for(i = 0; i < m; i++)
	{
		scanf("%d", &a[i]);
	}


	printf("Enter the number of elements of array 2:\n");
	scanf("%d", &n);
	printf("Enter the elements of array 2:\n");
	for(i = 0; i < n; i++) 
	{
		scanf("%d", &b[i]);
	}
	printf("the entered unsorted array1\t");
	display(a,m);
	printf("\nthe entered unsorted array2\t");
	display(b,n);
	sort(a, m);
	sort(b, n);
 	printf("\nSorted array 1:\n");
	display(a, m);
	printf("\nSorted array 2:\n");
	display(b, n);
	int merged_size = m + n;
	for(i = 0; i < m; i++)
	{
		d[i] = a[i];
	}
	for(i = 0; i < n; i++) 
	{
		d[m + i] = b[i];
	}
	printf("\nthe merged array");
	display(d, merged_size);
	sort(d, merged_size);
	printf("\nMerged and sorted array:\n");
	display(d, merged_size);

	return 0;
	}

program 3:C program to create a STACK using array data structure and implement the operations PUSH, POP and TRAVESE.
Roll no: 51
Name:Shahna S
code:
#include<stdio.h>
#include<stdlib.h>
int stack[10];
int top=-1;
int value;
int i;
void push()
{
	
		
	if (top == 10-1) 
		{
		printf("Error: Stack overflow!\n");
		return;
		}
	stack[++top] = value;
}
int pop() 
{
	if (top ==-1) {
		printf("Error: Stack underflow!\n");
	        return -1;
	}
	return stack[top--];
}
int traversal()
{
	if(top>=0)
	{
		printf("\n The elements in STACK \n");
			for(i=top; i>=0; i--)
				printf("\n%d\n",stack[i]);

	}
	else
	{
	printf("\n The STACK is empty");
	}
   
}
int main()
{
	int choice;
	do
	{	printf("1.Push\n2.pop\n3.traversal\n4.exit\n\n");
		scanf("%d",&choice);
		switch(choice)
		{
		case 1:
			printf("\nenter the value to push\n");
			scanf("%d",&value);				
			push();
			break;
		case 2:
			pop();
			break;
		case 3:
			traversal();
			break;
		case 4:
			break;
		default:
			printf("\nOOPS! wrong choice\n");
		}
	}
	while(choice !=4);
	
	return(0);
}


program 4:C program to create a QUEUE using array data structure and implement the operations ENQUEUE, DEQUEUE and TRAVERSE.
Roll no. 51
Name:Shahna S
code:
#include <stdio.h>


int queue[20];
int front = -1;
int rear = -1;


int isEmpty() 
{
    return front == -1;
}

int isFull() 
{
    return rear == 20 - 1;
}


void enqueue(int element) 
{
   	if (isFull()) 
	{
        	printf("Queue is full\n");
        	return;
    	}
   	 if (isEmpty()) 
	{
        	front = rear = 0;
	} 
	else 
	{
	       rear++;
	}
	queue[rear] = element;
	printf("%d enqueued to queue\n", element);
}

int dequeue() 
	{
		if (isEmpty()) 
		{
        		printf("Queue is empty\n");
        		return -1;
    		}
    		int element = queue[front];
    		if (front == rear) 
		{
        		front = rear = -1; 
		} 
		else 
		{
        		front++;
    		}
		return element;
	}


void traverse() 
{
	if (isEmpty())
	{
        	printf("Queue is empty\n");
        	return;
    	}
		printf("Queue elements: ");
		for (int i = front; i <= rear; i++) 
		{
			printf("%d ", queue[i]);
    		}
    		printf("\n");
}

int main() 
	{
		int choice, element;
    		while (1) 
		{
			printf("1. Enqueue\n2. Dequeue\n3. Traverse\n4. Exit\n");
			printf("Enter your choice: ");
			scanf("%d", &choice);

        	switch (choice) 
		{
			case 1:
		        	printf("Enter element to enqueue: ");
		        	scanf("%d", &element);
		        	enqueue(element);
		        	break;
			case 2:
		        	element = dequeue();
                		if (element != -1) 
				{
					printf("Dequeued element: %d\n", element);
                		}
                		break;
            		case 3:
                		traverse();
                		break;
            		case 4:
                		return 0;
            			default:
                		printf("Invalid choice. Please try again.\n");
        	}
		}
    return 0;
}


 



